# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .principal_type import PrincipalType


class RoleAssignment(pydantic_v1.BaseModel):
    """
    An Azure Role assignment is a mapping between a user, group, service principal, or managed identity to a role.
    This type is mirrored after the RoleAssignment type: https://pkg.go.dev/github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/authorization/armauthorization/v2#RoleAssignment
    """

    id: str
    name: str
    type: str
    principal_id: str = pydantic_v1.Field(alias="principalId")
    role_definition_id: str = pydantic_v1.Field(alias="roleDefinitionId")
    condition: typing.Optional[str] = None
    condition_version: typing.Optional[str] = pydantic_v1.Field(alias="conditionVersion", default=None)
    delegated_managed_identity_resource_id: typing.Optional[str] = pydantic_v1.Field(
        alias="delegatedManagedIdentityResourceId", default=None
    )
    description: typing.Optional[str] = None
    principal_type: typing.Optional[PrincipalType] = pydantic_v1.Field(alias="principalType", default=None)
    created_by: typing.Optional[str] = pydantic_v1.Field(alias="createdBy", default=None)
    created_on: typing.Optional[dt.datetime] = pydantic_v1.Field(alias="createdOn", default=None)
    scope: typing.Optional[str] = None
    updated_by: typing.Optional[str] = pydantic_v1.Field(alias="updatedBy", default=None)
    updated_on: typing.Optional[dt.datetime] = pydantic_v1.Field(alias="updatedOn", default=None)

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
