# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing
from .load_balancer_backend_address_admin_state import (
    LoadBalancerBackendAddressAdminState,
)
import pydantic
from ..azure.subresource import Subresource
from .nat_rule_port_mapping import NatRulePortMapping
from ..interface.network_interface import NetworkInterface
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class LoadBalancerBackendAddress(UniversalBaseModel):
    name: str
    admin_state: typing.Optional[LoadBalancerBackendAddressAdminState] = pydantic.Field(
        alias="adminState", default=None
    )
    ip_address: typing.Optional[str] = pydantic.Field(alias="ipAddress", default=None)
    load_balancer_frontend_ip_configuration: typing.Optional[Subresource] = (
        pydantic.Field(alias="loadBalancerFrontendIPConfiguration", default=None)
    )
    subnet: typing.Optional[Subresource] = None
    virtual_network: typing.Optional[Subresource] = pydantic.Field(
        alias="virtualNetwork", default=None
    )
    inbound_nat_rules_port_mapping: typing.Optional[typing.List[NatRulePortMapping]] = (
        pydantic.Field(alias="inboundNatRulesPortMapping", default=None)
    )
    network_interface_ip_configurations: typing.Optional[Subresource] = pydantic.Field(
        alias="networkInterfaceIpConfigurations", default=None
    )
    network_interface: typing.Optional[NetworkInterface] = pydantic.Field(
        alias="networkInterface", default=None
    )

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow"
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow
